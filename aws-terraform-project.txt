----------------------------------------------------------------------------------------------------------

*** AWS 3 Tier Application Project Using Terraform ***

001. Create aws-terraform project folder and configure backend.

- Configure <root/backend.tf> file to store terraform state metadata and lock the state file for teamwork.


terraform {
  cloud {
    organization = "uzbek"

    workspaces {
      name = "devops"
    }
  }
}


- Enter command <terraform login> in the cli to request API token in terraform cloud.
- Press the link on cli and give a name for token. Copy the generated API token and paste in the cli.
- Initialize by passing the command <terraform init>. In terraform cloud, go to <Settings> - <General>
  and choose <Local> option so plan and apply occur on local machine.

----------------------------------------------------------------------------------------------------------

002. Configure AWS provider.

- Create <root/providers.tf file>


terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
    }
  }
}

provider "aws" {
  region = var.aws_region     # passed region variable name from <root/variables.tf> file.
}


- Create <root/variables.tf> file.


# This Region value will be referenced in <root/providers.tf> file.

variable "aws_region" {
  default = "us-east-1"       # passed region variable in <root/providers.tf> file.
}


- Run <terraform init> to download plugins and initialize the provider.

----------------------------------------------------------------------------------------------------------

003. Create VPC resource.

- Create <root/networking> module folder.
- Inside networking folder create <main.tf>, <outputs.tf> and <variables.tf> files.
- In <root/networking/main.tf> file create VPC resources.


# This resource creates random integer which allows to assign new random number to VPC.
resource "random_integer" "random" {
  min = 1           # Assigns the lowest number.
  max = 100         # Assigns the highest number.
}

# This resource creates AWS VPC.

resource "aws_vpc" "my_vpc" {
  cidr_block           = var.vpc_cidr   # CIDR is referenced from <networking/variables.tf> file.
  enable_dns_hostnames = true           # Must enable dns hostname and support to provide hostname.
  enable_dns_support   = true

  tags = {
    Name = "my_vpc-${random_integer.random.id}"   # Referenced random integer resource to assign random integer ID.
  }
}


- Configure the values in <networking/variables.tf> file which references in <networking/main.tf> file.


# This variable being referenced in VPC resource in <networking/main.tf>

variable "vpc_cidr" {
  type = string
}


- Configure <networking/outputs.tf> file so that <root/main.tf> can consume VPC outputs from <networking/main.tf> to create VPC
  and pass them on to other modules.


# This out will be consumed by <root/main.tf> VPC module block to create VPC.

output "vpc_id" {
  value = aws_vpc.mtc_vpc.id
}


- In <root/main.tf> file create module and reference VPC resource from <networking/main.tf> file.


# Deploys <networking/main.tf> resources.

module "networking" {
  source   = "./networking"   # Referencing to <root/networking> module
  vpc_cidr = "10.123.0.0/16"  # This value goes to <networking/variables.tf> then <networking/main.tf> which is <var.vpc_cidr>
}


- Run <terraform fmt -recursive> to format and clean the code.
- Run <terraform init> to initialize plugins and new resources.
- Run <terraform validate> to validate the code.
- Run <terraform plan> to see which resources will be created.
- Run <terraform apply --auto-approve> to deploy the resources.

----------------------------------------------------------------------------------------------------------








----------------------------------------------------------------------------------------------------------


* Creating Application Load Balancer:
* Create <loadbalancing> module.
* Create main.tf, variables.tf, outputs.tf files in load balancing module.
* Create ALB resource in loadbalancing/main.tf.

resource = "aws_lb" "my-lb" {
  name = "my-loadbalancer"
  subnets = var.public_subnets
  security_groups = [var.public_sg]
  idle_timeout = 400
}


* Create variables in loadbalancing/variables.tf file.

variable "public_sg" {}
variable "public_subnets" {}


* Create module block in root/main.tf file.

module "loadbalancing" {
  source = "./loadbalancing"
  public_sg = ""
  public_subnets = ""
}




